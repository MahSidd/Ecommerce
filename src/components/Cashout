import React, { useState, useEffect, useContext } from 'react';
import { auth, db } from '../Config/Config';
import { CartContext } from '../global/CartContext';
import { NavBar } from './NavBar';
import { useNavigate } from 'react-router-dom';

export const Cashout = () => {
    const history = useNavigate();
    const { shoppingCart, dispatch } = useContext(CartContext);

    // State variables
    const [buyerInfo, setBuyerInfo] = useState({
        name: '',
        email: '',
        cell: '',
        address: '',
        error: '',
        successMsg: ''
    });

    useEffect(() => {
        const fetchData = async () => {
            auth.onAuthStateChanged(user => {
                if (user) {
                    db.collection('Users').doc(user.uid).onSnapshot(snapshot => {
                        const userData = snapshot.data();
                        setBuyerInfo(prevState => ({
                            ...prevState,
                            name: userData.Username || '',
                            email: userData.email || ''
                        }));
                    });
                } else {
                    history('/login');
                }
            });
        };

        fetchData();
    }, [history]);

    const { name, email, cell, address, error, successMsg } = buyerInfo;

    const cashoutSubmit = async (e) => {
        e.preventDefault();
        auth.onAuthStateChanged(user => {
            if (user) {
                const date = new Date();
                const time = date.getTime();
                db.collection('Buyer-info ' + user.uid).doc('_' + time).set({
                    BuyerName: name,
                    BuyerEmail: email,
                    BuyerCell: cell,
                    BuyerAddress: address,
                    BuyerPayment: calculateTotalPrice(), // Ensure this function is defined
                    BuyerQuantity: calculateTotalQty() // Ensure this function is defined
                }).then(() => {
                    setBuyerInfo(prevState => ({
                        ...prevState,
                        cell: '',
                        address: '',
                        successMsg: 'Your order has been placed successfully. Thanks for visiting us. You will be redirected to the home page after 5 seconds.'
                    }));
                    dispatch({ type: 'EMPTY' });
                    setTimeout(() => {
                        history.push('/');
                    }, 5000);
                }).catch(err => {
                    setBuyerInfo(prevState => ({
                        ...prevState,
                        error: err.message
                    }));
                });
            }
        });
    };

    // Calculate total price and quantity functions if not directly available from context
    const calculateTotalPrice = () => {
        return shoppingCart.reduce((total, product) => total + (product.qty * product.ProductPrice), 0);
    };

    const calculateTotalQty = () => {
        return shoppingCart.reduce((total, product) => total + product.qty, 0);
    };

    return (
        <>
            <NavBar />
            <div className='container'>
                <br />
                <h2>Cashout Details</h2>
                <br />
                {successMsg && <div className='success-msg'>{successMsg}</div>}
                <form autoComplete="off" className='form-group' onSubmit={cashoutSubmit}>
                    <label htmlFor="name">Name</label>
                    <input type="text" className='form-control' required value={name} disabled />
                    <br />
                    <label htmlFor="email">Email</label>
                    <input type="email" className='form-control' required value={email} disabled />
                    <br />
                    <label htmlFor="Cell No">Cell No</label>
                    <input type="number" className='form-control' required onChange={(e) => setBuyerInfo({ ...buyerInfo, cell: e.target.value })} value={cell} placeholder='e.g., 03123456789' />
                    <br />
                    <label htmlFor="Delivery Address">Delivery Address</label>
                    <input type="text" className='form-control' required onChange={(e) => setBuyerInfo({ ...buyerInfo, address: e.target.value })} value={address} />
                    <br />
                    <label htmlFor="Price To Pay">Price To Pay</label>
                    <input type="number" className='form-control' required value={calculateTotalPrice()} disabled />
                    <br />
                    <label htmlFor="Total No of Products">Total No of Products</label>
                    <input type="number" className='form-control' required value={calculateTotalQty()} disabled />
                    <br />
                    <button type="submit" className='btn btn-success btn-md mybtn'>SUBMIT</button>
                </form>
                {error && <span className='error-msg'>{error}</span>}
            </div>
        </>
    );
};

export default Cashout;
